{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///external \"crypto\"","webpack:///./src/helper.ts","webpack:///./src/mnemonic.ts","webpack:///./src/index.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","require","padding","data","max","pad","len","length","repeat","getCheckSum","buf","tmp","external_crypto_","update","digest","sha256","slice","bufToBinary","Array","from","map","v","toString","join","toUtf8","nor","normalize","Buffer","language","english","french","italian","japanese","korean","spanish","zh_CN","zh_TW","wordList","chinese_simplified","chinese_traditional","mLen","12","cs","ent","15","18","21","24","__webpack_exports__","getMnemonic","validateMnemonic","toSeed","toSeedHex","lang","Error","entropy","words","checksum","seedGroup","match","res","wordIndex","index","Number","parseInt","push","mnemonic","type","split","list","forEach","indexOf","bits","dividerIndex","Math","floor","entropyBits","checksumBits","entropyBytes","salt","password","pbkdf2"],"mappings":"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","file":"index.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 9);\n","module.exports = require(\"crypto\");","import { pbkdf2Sync } from 'crypto';\nimport { createHash } from 'crypto';\n\nexport const padding = (data: string, max: number = 8, pad: string = '0'): string => {\n  const len = data.length;\n  if (len < max) {\n    const repeat = pad.repeat(max - len);\n    return repeat + data;\n  }\n  return data;\n};\n\nexport const sha256 = (data: Buffer): Buffer => {\n  return createHash('sha256')\n    .update(data)\n    .digest();\n};\n\nexport const getCheckSum = (buf: Buffer, max: number): string => {\n  const tmp: Buffer = sha256(buf).slice(0, 1);\n  return bufToBinary(tmp).slice(0, max);\n};\n\nexport const bufToBinary = (buf: Buffer): string => {\n  return Array.from(buf)\n    .map((v) => padding(v.toString(2)))\n    .join('');\n};\n\nexport const toUtf8 = (data: string): Buffer => {\n  const nor: string = data.normalize('NFKD');\n  return Buffer.from(nor, 'utf8');\n};\n\nexport const pbkdf2 = (password: Buffer, salt: Buffer) => {\n  return pbkdf2Sync(password, salt, 2048, 64, 'sha512');\n};\n","export const language = {\n  english: 'english',\n  french: 'french',\n  italian: 'italian',\n  japanese: 'japanese',\n  korean: 'korean',\n  spanish: 'spanish',\n  zh_CN: 'zh_CN',\n  zh_TW: 'zh_TW'\n};\n\nimport zh_CN from './wordlist/chinese_simplified.json';\nimport zh_TW from './wordlist/chinese_traditional.json';\nimport english from './wordlist/english.json';\nimport french from './wordlist/french.json';\nimport italian from './wordlist/italian.json';\nimport japanese from './wordlist/japanese.json';\nimport korean from './wordlist/korean.json';\nimport spanish from './wordlist/spanish.json';\n\nexport const wordList = {\n  english,\n  french,\n  italian,\n  japanese,\n  korean,\n  spanish,\n  zh_CN,\n  zh_TW\n};\n\n// checksum\n// CS = ENT / 32\n// mnemonic sentence\n// MS = (ENT + CS) / 11\n// ENT = entropy\n\n// |  ENT  | CS | ENT+CS |  MS  |\n// +-------+----+--------+------+\n// |  128  |  4 |   132  |  12  |\n// |  160  |  5 |   165  |  15  |\n// |  192  |  6 |   198  |  18  |\n// |  224  |  7 |   231  |  21  |\n// |  256  |  8 |   264  |  24  |\n\nexport interface IBip39 {\n  [index: number]: {\n    cs: number;\n    ent: number;\n  };\n}\n\nexport const mLen: IBip39 = {\n  12: {\n    cs: 4,\n    ent: 128\n  },\n  15: {\n    cs: 5,\n    ent: 160\n  },\n  18: {\n    cs: 7,\n    ent: 192\n  },\n  21: {\n    cs: 5,\n    ent: 224\n  },\n  24: {\n    cs: 8,\n    ent: 256\n  }\n};\n","import { randomBytes } from 'crypto';\nimport { bufToBinary, getCheckSum, padding, pbkdf2, toUtf8 } from './helper';\nimport { language, mLen, wordList } from './mnemonic';\nexport { language };\n\nexport const getMnemonic = (lang: string = language.english, len: number = 12): string => {\n  if (len % 3 !== 0 || len < 12) {\n    throw new Error('The mnemonic length should be % 3 is equal with 0');\n  }\n\n  const m = mLen[len];\n  const entropy: Buffer = randomBytes(m.ent / 8);\n  const words: string[] = (wordList as any)[lang];\n\n  const checksum: string = getCheckSum(entropy, m.cs);\n  const seed: string = bufToBinary(entropy) + checksum;\n\n  const seedGroup = seed.match(/(.{11})/g)!;\n  const res: string[] = [];\n\n  for (const wordIndex of seedGroup) {\n    const index = Number.parseInt(wordIndex, 2);\n    res.push(words[index]);\n  }\n\n  return res.join(' ');\n};\n\nexport const validateMnemonic = (mnemonic: string, type: string = language.english): boolean => {\n  const m: string[] = mnemonic.normalize('NFKD').split(' ');\n\n  if (m.length % 3 !== 0) {\n    return false;\n  }\n\n  const list: string[] = (wordList as any)[type];\n  const tmp: string[] = [];\n\n  m.forEach((v) => {\n    const index: number = list.indexOf(v);\n    if (index === -1) {\n      return false;\n    }\n    tmp.push(padding(index.toString(2), 11));\n  });\n\n  const bits: string = tmp.join('');\n\n  const dividerIndex = Math.floor(bits.length / 33) * 32;\n  const entropyBits = bits.slice(0, dividerIndex);\n  const checksumBits = bits.slice(dividerIndex);\n\n  const entropyBytes = entropyBits.match(/(.{8})/g)!.map((v) => Number.parseInt(v, 2));\n\n  if (entropyBytes.length < 16 || entropyBytes.length > 32 || entropyBytes.length % 4 !== 0) {\n    return false;\n  }\n\n  const entropy = Buffer.from(entropyBytes);\n  const thisCheck = getCheckSum(entropy, mLen[m.length].cs);\n  if (thisCheck !== checksumBits) {\n    return false;\n  }\n\n  return true;\n};\n\nexport const toSeed = (mnemonic: string, salt: string = ''): Buffer => {\n  const m = toUtf8(mnemonic);\n  const s = toUtf8('mnemonic' + salt);\n  return pbkdf2(m, s);\n};\n\nexport const toSeedHex = (mnemonic: string, salt?: string): string => {\n  return toSeed(mnemonic, salt).toString('hex');\n};\n"],"sourceRoot":""}